
TimerComunication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000073c  000007d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000209  00800104  00800104  000007d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000804  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bf  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000754  00000000  00000000  00001263  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ae  00000000  00000000  000019b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044b  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c1  00000000  00000000  0000248f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_11>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_18>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	14 01       	movw	r2, r8
  6a:	28 01       	movw	r4, r16
  6c:	3c 01       	movw	r6, r24
  6e:	50 01       	movw	r10, r0
  70:	64 01       	movw	r12, r8
  72:	70 01       	movw	r14, r0
  74:	84 01       	movw	r16, r8
  76:	a3 01       	movw	r20, r6

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	ec e3       	ldi	r30, 0x3C	; 60
  8c:	f7 e0       	ldi	r31, 0x07	; 7
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	23 e0       	ldi	r18, 0x03	; 3
  9c:	a4 e0       	ldi	r26, 0x04	; 4
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	ad 30       	cpi	r26, 0x0D	; 13
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 13 03 	call	0x626	; 0x626 <main>
  ae:	0c 94 9c 03 	jmp	0x738	; 0x738 <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <__vector_18>:
///* Put data into buffer, sends the data */
//UDRn = data;
//}

//Interrupciones
ISR(USART_RX_vect){
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	bufferRX[indRX++] = UDR0;
  c6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <indRX>
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	8e 0f       	add	r24, r30
  ce:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <indRX>
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d8:	e4 5f       	subi	r30, 0xF4	; 244
  da:	fe 4f       	sbci	r31, 0xFE	; 254
  dc:	80 83       	st	Z, r24
}
  de:	ff 91       	pop	r31
  e0:	ef 91       	pop	r30
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_11>:

ISR(TIMER1_COMPA_vect){
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
	if (timeOut1ms)
  fc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timeOut1ms>
 100:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timeOut1ms+0x1>
 104:	89 2b       	or	r24, r25
 106:	49 f0       	breq	.+18     	; 0x11a <__vector_11+0x2c>
	{
		timeOut1ms--;
 108:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timeOut1ms>
 10c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timeOut1ms+0x1>
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timeOut1ms+0x1>
 116:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timeOut1ms>
	}
	
}
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <USART_Init>:
// Funciones
void USART_Init(){
	/* Configuración del USART como UART */

	// USART como UART
	UCSR0C &=~ (1<<UMSEL00);
 128:	e2 ec       	ldi	r30, 0xC2	; 194
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	8f 7b       	andi	r24, 0xBF	; 191
 130:	80 83       	st	Z, r24
	UCSR0C &=~ (1<<UMSEL01);
 132:	80 81       	ld	r24, Z
 134:	8f 77       	andi	r24, 0x7F	; 127
 136:	80 83       	st	Z, r24

	// Paridad desactivada
	UCSR0C &=~ (1<<UPM00);
 138:	80 81       	ld	r24, Z
 13a:	8f 7e       	andi	r24, 0xEF	; 239
 13c:	80 83       	st	Z, r24
	UCSR0C &=~ (1<<UPM01);
 13e:	80 81       	ld	r24, Z
 140:	8f 7d       	andi	r24, 0xDF	; 223
 142:	80 83       	st	Z, r24

	// Stops = 1
	UCSR0C &=~ (1<<USBS0);
 144:	80 81       	ld	r24, Z
 146:	87 7f       	andi	r24, 0xF7	; 247
 148:	80 83       	st	Z, r24

	// Datos de 8 bits
	UCSR0C |=  (1<<UCSZ00);
 14a:	80 81       	ld	r24, Z
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	80 83       	st	Z, r24
	UCSR0C |=  (1<<UCSZ01);
 150:	80 81       	ld	r24, Z
 152:	84 60       	ori	r24, 0x04	; 4
 154:	80 83       	st	Z, r24
	UCSR0B &=~ (1<<UCSZ02);
 156:	e1 ec       	ldi	r30, 0xC1	; 193
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8b 7f       	andi	r24, 0xFB	; 251
 15e:	80 83       	st	Z, r24
	
	// Calculo del baudrate
	UCSR0A &=~ (1<<U2X0);
 160:	a0 ec       	ldi	r26, 0xC0	; 192
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	8c 91       	ld	r24, X
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	8c 93       	st	X, r24
	UBRR0 = MYUBRR;
 16a:	87 e6       	ldi	r24, 0x67	; 103
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 172:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	UCSR0B |= (1<<TXEN0); //activo recepcion de datos
 176:	80 81       	ld	r24, Z
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0); //activo envio de datos
 17c:	80 81       	ld	r24, Z
 17e:	80 61       	ori	r24, 0x10	; 16
 180:	80 83       	st	Z, r24

	UCSR0B |= (1<<RXCIE0); //interrupcion de recepcion completada
 182:	80 81       	ld	r24, Z
 184:	80 68       	ori	r24, 0x80	; 128
 186:	80 83       	st	Z, r24
 188:	08 95       	ret

0000018a <initPort>:
}

void initPort(){
	//Configuro Pin del LED como salida (PB5 Arduino uno)
	DDRB = (1 << DDB5);
 18a:	80 e2       	ldi	r24, 0x20	; 32
 18c:	84 b9       	out	0x04, r24	; 4
	
	PORTB |= (1 << PORTB5);
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	80 62       	ori	r24, 0x20	; 32
 192:	85 b9       	out	0x05, r24	; 5
 194:	08 95       	ret

00000196 <initTimers>:
}

void initTimers(){
	OCR1A = 0x7D0;
 196:	80 ed       	ldi	r24, 0xD0	; 208
 198:	97 e0       	ldi	r25, 0x07	; 7
 19a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 19e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = 0x00;
 1a2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0x00; //reseteo registros
 1a6:	e1 e8       	ldi	r30, 0x81	; 129
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	10 82       	st	Z, r1
	TCNT1 = 0x00; //inicializo timer
 1ac:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1b0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 = TIFR1;
 1b4:	86 b3       	in	r24, 0x16	; 22
 1b6:	86 bb       	out	0x16, r24	; 22
	TIMSK1 = (1 << OCIE1A); //activo flag interrupt cuando TCNT1 = OCR1A
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B = (1 << WGM12) | (1 << CS11); //configuro prescaler 8 y modo CTC
 1be:	8a e0       	ldi	r24, 0x0A	; 10
 1c0:	80 83       	st	Z, r24
 1c2:	08 95       	ret

000001c4 <RecibirDatos>:
		indBufferRX++;
	}
}

void RecibirDatos(uint8_t head){
	switch (bufferRX[head++]){
 1c4:	e8 2f       	mov	r30, r24
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	e4 5f       	subi	r30, 0xF4	; 244
 1ca:	fe 4f       	sbci	r31, 0xFE	; 254
 1cc:	80 81       	ld	r24, Z
 1ce:	81 3f       	cpi	r24, 0xF1	; 241
 1d0:	51 f0       	breq	.+20     	; 0x1e6 <RecibirDatos+0x22>
 1d2:	82 3f       	cpi	r24, 0xF2	; 242
 1d4:	99 f0       	breq	.+38     	; 0x1fc <RecibirDatos+0x38>
 1d6:	80 3f       	cpi	r24, 0xF0	; 240
 1d8:	b1 f4       	brne	.+44     	; 0x206 <RecibirDatos+0x42>
		case 0xF0:
			ALIVESENT = 1;
 1da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag1>
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <flag1>
			//algo
		break;
 1e4:	08 95       	ret
		case PLUS10MSCMD:
			PRUEBA = 1;
 1e6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag1>
 1ea:	80 61       	ori	r24, 0x10	; 16
 1ec:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <flag1>
			PLUS10MSFLAG = 1;
 1f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag1>
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <flag1>
		break;
 1fa:	08 95       	ret
		case MINUS10MSCMD:
			MINUS10MSFLAG = 1;
 1fc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag1>
 200:	84 60       	ori	r24, 0x04	; 4
 202:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <flag1>
 206:	08 95       	ret

00000208 <LeerCabecera>:
	TIFR1 = TIFR1;
	TIMSK1 = (1 << OCIE1A); //activo flag interrupt cuando TCNT1 = OCR1A
	TCCR1B = (1 << WGM12) | (1 << CS11); //configuro prescaler 8 y modo CTC
}

void LeerCabecera(uint8_t ind){
 208:	cf 93       	push	r28
 20a:	c8 2f       	mov	r28, r24
	static uint8_t caracter = 0;
	
	while(ind != indBufferRX)
 20c:	c8 c0       	rjmp	.+400    	; 0x39e <LeerCabecera+0x196>
	{
		switch (caracter)
 20e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 212:	82 2f       	mov	r24, r18
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	88 30       	cpi	r24, 0x08	; 8
 218:	91 05       	cpc	r25, r1
 21a:	08 f0       	brcs	.+2      	; 0x21e <LeerCabecera+0x16>
 21c:	b9 c0       	rjmp	.+370    	; 0x390 <LeerCabecera+0x188>
 21e:	fc 01       	movw	r30, r24
 220:	ec 5c       	subi	r30, 0xCC	; 204
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	0c 94 96 03 	jmp	0x72c	; 0x72c <__tablejump2__>
		{
			case 0:
			if (bufferRX[indBufferRX] == 'U')
 228:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indBufferRX>
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	e4 5f       	subi	r30, 0xF4	; 244
 230:	fe 4f       	sbci	r31, 0xFE	; 254
 232:	80 81       	ld	r24, Z
 234:	85 35       	cpi	r24, 0x55	; 85
 236:	21 f4       	brne	.+8      	; 0x240 <LeerCabecera+0x38>
			caracter++;
 238:	2f 5f       	subi	r18, 0xFF	; 255
 23a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 23e:	aa c0       	rjmp	.+340    	; 0x394 <LeerCabecera+0x18c>
			else{
				caracter = 0;
 240:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
				indBufferRX--;
 244:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indBufferRX>
 248:	81 50       	subi	r24, 0x01	; 1
 24a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indBufferRX>
 24e:	a2 c0       	rjmp	.+324    	; 0x394 <LeerCabecera+0x18c>
			}
			break;
			case 1:
			if (bufferRX[indBufferRX] == 'N')
 250:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indBufferRX>
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	e4 5f       	subi	r30, 0xF4	; 244
 258:	fe 4f       	sbci	r31, 0xFE	; 254
 25a:	80 81       	ld	r24, Z
 25c:	8e 34       	cpi	r24, 0x4E	; 78
 25e:	21 f4       	brne	.+8      	; 0x268 <LeerCabecera+0x60>
			caracter++;
 260:	2f 5f       	subi	r18, 0xFF	; 255
 262:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 266:	96 c0       	rjmp	.+300    	; 0x394 <LeerCabecera+0x18c>
			else{
				caracter = 0;
 268:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
				indBufferRX--;
 26c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indBufferRX>
 270:	81 50       	subi	r24, 0x01	; 1
 272:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indBufferRX>
 276:	8e c0       	rjmp	.+284    	; 0x394 <LeerCabecera+0x18c>
			}
			break;
			case 2:
			if (bufferRX[indBufferRX] == 'E')
 278:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indBufferRX>
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	e4 5f       	subi	r30, 0xF4	; 244
 280:	fe 4f       	sbci	r31, 0xFE	; 254
 282:	80 81       	ld	r24, Z
 284:	85 34       	cpi	r24, 0x45	; 69
 286:	21 f4       	brne	.+8      	; 0x290 <LeerCabecera+0x88>
			caracter++;
 288:	2f 5f       	subi	r18, 0xFF	; 255
 28a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 28e:	82 c0       	rjmp	.+260    	; 0x394 <LeerCabecera+0x18c>
			else{
				caracter = 0;
 290:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
				indBufferRX--;
 294:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indBufferRX>
 298:	81 50       	subi	r24, 0x01	; 1
 29a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indBufferRX>
 29e:	7a c0       	rjmp	.+244    	; 0x394 <LeerCabecera+0x18c>
			}
			break;
			case 3:
			if (bufferRX[indBufferRX] == 'R')
 2a0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indBufferRX>
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	e4 5f       	subi	r30, 0xF4	; 244
 2a8:	fe 4f       	sbci	r31, 0xFE	; 254
 2aa:	80 81       	ld	r24, Z
 2ac:	82 35       	cpi	r24, 0x52	; 82
 2ae:	21 f4       	brne	.+8      	; 0x2b8 <LeerCabecera+0xb0>
			caracter++;
 2b0:	2f 5f       	subi	r18, 0xFF	; 255
 2b2:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 2b6:	6e c0       	rjmp	.+220    	; 0x394 <LeerCabecera+0x18c>
			else{
				caracter = 0;
 2b8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
				indBufferRX--;
 2bc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indBufferRX>
 2c0:	81 50       	subi	r24, 0x01	; 1
 2c2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indBufferRX>
 2c6:	66 c0       	rjmp	.+204    	; 0x394 <LeerCabecera+0x18c>
			}
			break;
			case 4:
			nBytes = bufferRX[indBufferRX];
 2c8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indBufferRX>
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	e4 5f       	subi	r30, 0xF4	; 244
 2d0:	fe 4f       	sbci	r31, 0xFE	; 254
 2d2:	80 81       	ld	r24, Z
 2d4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <nBytes>
			caracter++;
 2d8:	2f 5f       	subi	r18, 0xFF	; 255
 2da:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
			break;
 2de:	5a c0       	rjmp	.+180    	; 0x394 <LeerCabecera+0x18c>
			case 5:
			if (bufferRX[indBufferRX] == 0x00)
 2e0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indBufferRX>
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	e4 5f       	subi	r30, 0xF4	; 244
 2e8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ea:	80 81       	ld	r24, Z
 2ec:	81 11       	cpse	r24, r1
 2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <LeerCabecera+0xf0>
			caracter++;
 2f0:	2f 5f       	subi	r18, 0xFF	; 255
 2f2:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 2f6:	4e c0       	rjmp	.+156    	; 0x394 <LeerCabecera+0x18c>
			else{
				caracter = 0;
 2f8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
				indBufferRX--;
 2fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indBufferRX>
 300:	81 50       	subi	r24, 0x01	; 1
 302:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indBufferRX>
 306:	46 c0       	rjmp	.+140    	; 0x394 <LeerCabecera+0x18c>
			}
			break;
			case 6:
			if (bufferRX[indBufferRX] == ':')
 308:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indBufferRX>
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	e4 5f       	subi	r30, 0xF4	; 244
 310:	fe 4f       	sbci	r31, 0xFE	; 254
 312:	80 81       	ld	r24, Z
 314:	8a 33       	cpi	r24, 0x3A	; 58
 316:	79 f4       	brne	.+30     	; 0x336 <LeerCabecera+0x12e>
			{
				cks= 'U'^'N'^'E'^'R'^nBytes^0x00^':';
 318:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <nBytes>
 31c:	86 e3       	ldi	r24, 0x36	; 54
 31e:	89 27       	eor	r24, r25
 320:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <cks>
				caracter++;
 324:	2f 5f       	subi	r18, 0xFF	; 255
 326:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
				headDeco = indBufferRX+1;
 32a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indBufferRX>
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <headDeco>
 334:	2f c0       	rjmp	.+94     	; 0x394 <LeerCabecera+0x18c>
			}
			else{
				caracter = 0;
 336:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
				indBufferRX--;
 33a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indBufferRX>
 33e:	81 50       	subi	r24, 0x01	; 1
 340:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indBufferRX>
 344:	27 c0       	rjmp	.+78     	; 0x394 <LeerCabecera+0x18c>
			}
			break;
			
			case 7:
			if(nBytes>1){
 346:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <nBytes>
 34a:	82 30       	cpi	r24, 0x02	; 2
 34c:	58 f0       	brcs	.+22     	; 0x364 <LeerCabecera+0x15c>
				cks^=bufferRX[indBufferRX];
 34e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indBufferRX>
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	e4 5f       	subi	r30, 0xF4	; 244
 356:	fe 4f       	sbci	r31, 0xFE	; 254
 358:	90 81       	ld	r25, Z
 35a:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <cks>
 35e:	92 27       	eor	r25, r18
 360:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <cks>
			}
			nBytes--;
 364:	81 50       	subi	r24, 0x01	; 1
 366:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <nBytes>
			if(nBytes==0){
 36a:	81 11       	cpse	r24, r1
 36c:	13 c0       	rjmp	.+38     	; 0x394 <LeerCabecera+0x18c>
				caracter=0;
 36e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
				if(cks==bufferRX[indBufferRX]){
 372:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indBufferRX>
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	e4 5f       	subi	r30, 0xF4	; 244
 37a:	fe 4f       	sbci	r31, 0xFE	; 254
 37c:	90 81       	ld	r25, Z
 37e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <cks>
 382:	98 13       	cpse	r25, r24
 384:	07 c0       	rjmp	.+14     	; 0x394 <LeerCabecera+0x18c>
					RecibirDatos(headDeco);
 386:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <headDeco>
 38a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <RecibirDatos>
 38e:	02 c0       	rjmp	.+4      	; 0x394 <LeerCabecera+0x18c>
				}
			}
			break;
			default:
			caracter = 0;
 390:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			break;
		}
		indBufferRX++;
 394:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indBufferRX>
 398:	8f 5f       	subi	r24, 0xFF	; 255
 39a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indBufferRX>
}

void LeerCabecera(uint8_t ind){
	static uint8_t caracter = 0;
	
	while(ind != indBufferRX)
 39e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indBufferRX>
 3a2:	8c 13       	cpse	r24, r28
 3a4:	34 cf       	rjmp	.-408    	; 0x20e <LeerCabecera+0x6>
			caracter = 0;
			break;
		}
		indBufferRX++;
	}
}
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <EnviarDatos>:
		break;
	}
}

void EnviarDatos(uint8_t cmd){
	bufferTX[indBufferTX++]='U';
 3aa:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	9e 0f       	add	r25, r30
 3b2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <indBufferTX>
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	e3 5f       	subi	r30, 0xF3	; 243
 3ba:	fd 4f       	sbci	r31, 0xFD	; 253
 3bc:	95 e5       	ldi	r25, 0x55	; 85
 3be:	90 83       	st	Z, r25
	bufferTX[indBufferTX++]='N';
 3c0:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	9e 0f       	add	r25, r30
 3c8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <indBufferTX>
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	e3 5f       	subi	r30, 0xF3	; 243
 3d0:	fd 4f       	sbci	r31, 0xFD	; 253
 3d2:	9e e4       	ldi	r25, 0x4E	; 78
 3d4:	90 83       	st	Z, r25
	bufferTX[indBufferTX++]='E';
 3d6:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	9e 0f       	add	r25, r30
 3de:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <indBufferTX>
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	e3 5f       	subi	r30, 0xF3	; 243
 3e6:	fd 4f       	sbci	r31, 0xFD	; 253
 3e8:	95 e4       	ldi	r25, 0x45	; 69
 3ea:	90 83       	st	Z, r25
	bufferTX[indBufferTX++]='R';
 3ec:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	9e 0f       	add	r25, r30
 3f4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <indBufferTX>
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	e3 5f       	subi	r30, 0xF3	; 243
 3fc:	fd 4f       	sbci	r31, 0xFD	; 253
 3fe:	92 e5       	ldi	r25, 0x52	; 82
 400:	90 83       	st	Z, r25
	
	switch(cmd){
 402:	82 3f       	cpi	r24, 0xF2	; 242
 404:	09 f4       	brne	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	69 c0       	rjmp	.+210    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 408:	28 f4       	brcc	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 40a:	80 3f       	cpi	r24, 0xF0	; 240
 40c:	51 f0       	breq	.+20     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 40e:	81 3f       	cpi	r24, 0xF1	; 241
 410:	c1 f1       	breq	.+112    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 412:	e6 c0       	rjmp	.+460    	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
 414:	85 3f       	cpi	r24, 0xF5	; 245
 416:	09 f4       	brne	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 418:	8c c0       	rjmp	.+280    	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 41a:	86 3f       	cpi	r24, 0xF6	; 246
 41c:	09 f4       	brne	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41e:	b5 c0       	rjmp	.+362    	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
 420:	df c0       	rjmp	.+446    	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
		case ALIVECMD:
			bufferTX[indBufferTX++] = 0x02;
 422:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	9e 0f       	add	r25, r30
 42a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <indBufferTX>
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	e3 5f       	subi	r30, 0xF3	; 243
 432:	fd 4f       	sbci	r31, 0xFD	; 253
 434:	92 e0       	ldi	r25, 0x02	; 2
 436:	90 83       	st	Z, r25
			bufferTX[indBufferTX++] = 0x00;
 438:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	9e 0f       	add	r25, r30
 440:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <indBufferTX>
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	e3 5f       	subi	r30, 0xF3	; 243
 448:	fd 4f       	sbci	r31, 0xFD	; 253
 44a:	10 82       	st	Z, r1
			bufferTX[indBufferTX++] = ':';
 44c:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	9e 0f       	add	r25, r30
 454:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <indBufferTX>
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	e3 5f       	subi	r30, 0xF3	; 243
 45c:	fd 4f       	sbci	r31, 0xFD	; 253
 45e:	9a e3       	ldi	r25, 0x3A	; 58
 460:	90 83       	st	Z, r25
			bufferTX[indBufferTX++] = cmd;
 462:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	9e 0f       	add	r25, r30
 46a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <indBufferTX>
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	e3 5f       	subi	r30, 0xF3	; 243
 472:	fd 4f       	sbci	r31, 0xFD	; 253
 474:	80 83       	st	Z, r24
			ALIVESENT = 0;
 476:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag1>
 47a:	8e 7f       	andi	r24, 0xFE	; 254
 47c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <flag1>
		break;
 480:	af c0       	rjmp	.+350    	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
		case PLUS10MSCMD:
			bufferTX[indBufferTX++] = 0x02;
 482:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	8e 0f       	add	r24, r30
 48a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	e3 5f       	subi	r30, 0xF3	; 243
 492:	fd 4f       	sbci	r31, 0xFD	; 253
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	80 83       	st	Z, r24
			bufferTX[indBufferTX++] = 0x00;
 498:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	8e 0f       	add	r24, r30
 4a0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	e3 5f       	subi	r30, 0xF3	; 243
 4a8:	fd 4f       	sbci	r31, 0xFD	; 253
 4aa:	10 82       	st	Z, r1
			bufferTX[indBufferTX++] = ':';
 4ac:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	8e 0f       	add	r24, r30
 4b4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	e3 5f       	subi	r30, 0xF3	; 243
 4bc:	fd 4f       	sbci	r31, 0xFD	; 253
 4be:	8a e3       	ldi	r24, 0x3A	; 58
 4c0:	80 83       	st	Z, r24
			bufferTX[indBufferTX++] = PLUS10MSCMD;
 4c2:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	8e 0f       	add	r24, r30
 4ca:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	e3 5f       	subi	r30, 0xF3	; 243
 4d2:	fd 4f       	sbci	r31, 0xFD	; 253
 4d4:	81 ef       	ldi	r24, 0xF1	; 241
 4d6:	80 83       	st	Z, r24
		break;
 4d8:	83 c0       	rjmp	.+262    	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
		case MINUS10MSCMD:
			bufferTX[indBufferTX++] = 0x02;
 4da:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	8e 0f       	add	r24, r30
 4e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	e3 5f       	subi	r30, 0xF3	; 243
 4ea:	fd 4f       	sbci	r31, 0xFD	; 253
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	80 83       	st	Z, r24
			bufferTX[indBufferTX++] = 0x00;
 4f0:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	8e 0f       	add	r24, r30
 4f8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	e3 5f       	subi	r30, 0xF3	; 243
 500:	fd 4f       	sbci	r31, 0xFD	; 253
 502:	10 82       	st	Z, r1
			bufferTX[indBufferTX++] = ':';
 504:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	8e 0f       	add	r24, r30
 50c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	e3 5f       	subi	r30, 0xF3	; 243
 514:	fd 4f       	sbci	r31, 0xFD	; 253
 516:	8a e3       	ldi	r24, 0x3A	; 58
 518:	80 83       	st	Z, r24
			bufferTX[indBufferTX++] = MINUS10MSCMD;
 51a:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	8e 0f       	add	r24, r30
 522:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	e3 5f       	subi	r30, 0xF3	; 243
 52a:	fd 4f       	sbci	r31, 0xFD	; 253
 52c:	82 ef       	ldi	r24, 0xF2	; 242
 52e:	80 83       	st	Z, r24
		break;
 530:	57 c0       	rjmp	.+174    	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
		
		case 0xF5:
			bufferTX[indBufferTX++] = 0x02;
 532:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	8e 0f       	add	r24, r30
 53a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	e3 5f       	subi	r30, 0xF3	; 243
 542:	fd 4f       	sbci	r31, 0xFD	; 253
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	80 83       	st	Z, r24
			bufferTX[indBufferTX++] = 0x00;
 548:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	8e 0f       	add	r24, r30
 550:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	e3 5f       	subi	r30, 0xF3	; 243
 558:	fd 4f       	sbci	r31, 0xFD	; 253
 55a:	10 82       	st	Z, r1
			bufferTX[indBufferTX++] = ':';
 55c:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	8e 0f       	add	r24, r30
 564:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	e3 5f       	subi	r30, 0xF3	; 243
 56c:	fd 4f       	sbci	r31, 0xFD	; 253
 56e:	8a e3       	ldi	r24, 0x3A	; 58
 570:	80 83       	st	Z, r24
			bufferTX[indBufferTX++] = 0xF5;
 572:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	8e 0f       	add	r24, r30
 57a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	e3 5f       	subi	r30, 0xF3	; 243
 582:	fd 4f       	sbci	r31, 0xFD	; 253
 584:	85 ef       	ldi	r24, 0xF5	; 245
 586:	80 83       	st	Z, r24
		break;
 588:	2b c0       	rjmp	.+86     	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
		case 0xF6:
			bufferTX[indBufferTX++] = 0x02;
 58a:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	8e 0f       	add	r24, r30
 592:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	e3 5f       	subi	r30, 0xF3	; 243
 59a:	fd 4f       	sbci	r31, 0xFD	; 253
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	80 83       	st	Z, r24
			bufferTX[indBufferTX++] = 0x00;
 5a0:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	8e 0f       	add	r24, r30
 5a8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	e3 5f       	subi	r30, 0xF3	; 243
 5b0:	fd 4f       	sbci	r31, 0xFD	; 253
 5b2:	10 82       	st	Z, r1
			bufferTX[indBufferTX++] = ':';
 5b4:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	8e 0f       	add	r24, r30
 5bc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	e3 5f       	subi	r30, 0xF3	; 243
 5c4:	fd 4f       	sbci	r31, 0xFD	; 253
 5c6:	8a e3       	ldi	r24, 0x3A	; 58
 5c8:	80 83       	st	Z, r24
			bufferTX[indBufferTX++] = 0xF6;
 5ca:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	8e 0f       	add	r24, r30
 5d2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <indBufferTX>
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	e3 5f       	subi	r30, 0xF3	; 243
 5da:	fd 4f       	sbci	r31, 0xFD	; 253
 5dc:	86 ef       	ldi	r24, 0xF6	; 246
 5de:	80 83       	st	Z, r24
		break;
		default:
		break;
	}
	
	cks=0;
 5e0:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <cks>
	for(uint8_t i=indTX; i<indBufferTX; i++) {
 5e4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <indTX>
 5e8:	0b c0       	rjmp	.+22     	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
		cks^=bufferTX[i];
 5ea:	e8 2f       	mov	r30, r24
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	e3 5f       	subi	r30, 0xF3	; 243
 5f0:	fd 4f       	sbci	r31, 0xFD	; 253
 5f2:	90 81       	ld	r25, Z
 5f4:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <cks>
 5f8:	92 27       	eor	r25, r18
 5fa:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <cks>
		default:
		break;
	}
	
	cks=0;
	for(uint8_t i=indTX; i<indBufferTX; i++) {
 5fe:	8f 5f       	subi	r24, 0xFF	; 255
 600:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <indBufferTX>
 604:	89 17       	cp	r24, r25
 606:	88 f3       	brcs	.-30     	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
		cks^=bufferTX[i];
		//pc.printf("%d - %x - %d   v: %d \n",i,cks,cks,tx[i]);
	}
	if(cks>0)
 608:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <cks>
 60c:	88 23       	and	r24, r24
 60e:	51 f0       	breq	.+20     	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
	bufferTX[indBufferTX++]=cks;
 610:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <indBufferTX>
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	9e 0f       	add	r25, r30
 618:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <indBufferTX>
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	e3 5f       	subi	r30, 0xF3	; 243
 620:	fd 4f       	sbci	r31, 0xFD	; 253
 622:	80 83       	st	Z, r24
 624:	08 95       	ret

00000626 <main>:

//..

int main(void)
{
	USART_Init();
 626:	0e 94 94 00 	call	0x128	; 0x128 <USART_Init>
	initPort();
 62a:	0e 94 c5 00 	call	0x18a	; 0x18a <initPort>
	//valorTimeOut=timeOut1ms;
	initTimers();
 62e:	0e 94 cb 00 	call	0x196	; 0x196 <initTimers>
	sei();
 632:	78 94       	sei
	/* Replace with your application code */
	while (1)
	{
		if (indRX!=indBufferRX)
 634:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <indRX>
 638:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indBufferRX>
 63c:	98 17       	cp	r25, r24
 63e:	21 f0       	breq	.+8      	; 0x648 <main+0x22>
		{
			LeerCabecera(indRX);
 640:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <indRX>
 644:	0e 94 04 01 	call	0x208	; 0x208 <LeerCabecera>
		}
		
		if (ALIVESENT)
 648:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag1>
 64c:	80 ff       	sbrs	r24, 0
 64e:	03 c0       	rjmp	.+6      	; 0x656 <main+0x30>
		{
			EnviarDatos(ALIVECMD);
 650:	80 ef       	ldi	r24, 0xF0	; 240
 652:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EnviarDatos>
		}
		if (PLUS10MSFLAG)
 656:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag1>
 65a:	81 ff       	sbrs	r24, 1
 65c:	1a c0       	rjmp	.+52     	; 0x692 <main+0x6c>
		{
			//EnviarDatos(PLUS10MSCMD);
			if(valorTimeOut<3000)
 65e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 662:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 666:	88 3b       	cpi	r24, 0xB8	; 184
 668:	9b 40       	sbci	r25, 0x0B	; 11
 66a:	58 f4       	brcc	.+22     	; 0x682 <main+0x5c>
				valorTimeOut += 100;
 66c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 670:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 674:	8c 59       	subi	r24, 0x9C	; 156
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 67c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 680:	03 c0       	rjmp	.+6      	; 0x688 <main+0x62>
			else
				EnviarDatos(0xF5);
 682:	85 ef       	ldi	r24, 0xF5	; 245
 684:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EnviarDatos>
			PLUS10MSFLAG = 0;
 688:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag1>
 68c:	8d 7f       	andi	r24, 0xFD	; 253
 68e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <flag1>
		}
		if (MINUS10MSFLAG)
 692:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag1>
 696:	82 ff       	sbrs	r24, 2
 698:	1a c0       	rjmp	.+52     	; 0x6ce <main+0xa8>
		{
			//EnviarDatos(MINUS10MSCMD);
				if(valorTimeOut>100)
 69a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 69e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6a2:	85 36       	cpi	r24, 0x65	; 101
 6a4:	91 05       	cpc	r25, r1
 6a6:	58 f0       	brcs	.+22     	; 0x6be <main+0x98>
					valorTimeOut -= 100;
 6a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6b0:	84 56       	subi	r24, 0x64	; 100
 6b2:	91 09       	sbc	r25, r1
 6b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <main+0x9e>
				else
					EnviarDatos(0xF6);
 6be:	86 ef       	ldi	r24, 0xF6	; 246
 6c0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EnviarDatos>
			MINUS10MSFLAG = 0;
 6c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag1>
 6c8:	8b 7f       	andi	r24, 0xFB	; 251
 6ca:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <flag1>
		}
		if (!timeOut1ms){
 6ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timeOut1ms>
 6d2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timeOut1ms+0x1>
 6d6:	89 2b       	or	r24, r25
 6d8:	11 f5       	brne	.+68     	; 0x71e <main+0xf8>
			timeOut1ms = valorTimeOut;
 6da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6e2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timeOut1ms+0x1>
 6e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timeOut1ms>
			//(1 << PORTB5 1) desplazado por B5 es igual a 00100000
			if(PORTB & (1 << PORTB5)) //desplazo al numero 1 cinco veces para que aparezca en la posicion 5
 6ea:	2d 9b       	sbis	0x05, 5	; 5
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <main+0xd0>
				PORTB &= ~(1 << PORTB5); //~ (1 << PORTB5) = 11011111 hago cero el bit 5 de PORTB5
 6ee:	85 b1       	in	r24, 0x05	; 5
 6f0:	8f 7d       	andi	r24, 0xDF	; 223
 6f2:	85 b9       	out	0x05, r24	; 5
 6f4:	14 c0       	rjmp	.+40     	; 0x71e <main+0xf8>
			else
				PORTB |= (1 << PORTB5);
 6f6:	85 b1       	in	r24, 0x05	; 5
 6f8:	80 62       	ori	r24, 0x20	; 32
 6fa:	85 b9       	out	0x05, r24	; 5
 6fc:	10 c0       	rjmp	.+32     	; 0x71e <main+0xf8>
		}
		
		while (indTX!=indBufferTX){
			while(!(UCSR0A & (1<<UDRE0)));
 6fe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 702:	85 ff       	sbrs	r24, 5
 704:	fc cf       	rjmp	.-8      	; 0x6fe <main+0xd8>
			UDR0 = bufferTX[indTX++];
 706:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <indTX>
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	8e 0f       	add	r24, r30
 70e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <indTX>
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	e3 5f       	subi	r30, 0xF3	; 243
 716:	fd 4f       	sbci	r31, 0xFD	; 253
 718:	80 81       	ld	r24, Z
 71a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				PORTB &= ~(1 << PORTB5); //~ (1 << PORTB5) = 11011111 hago cero el bit 5 de PORTB5
			else
				PORTB |= (1 << PORTB5);
		}
		
		while (indTX!=indBufferTX){
 71e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <indTX>
 722:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <indBufferTX>
 726:	98 13       	cpse	r25, r24
 728:	ea cf       	rjmp	.-44     	; 0x6fe <main+0xd8>
 72a:	84 cf       	rjmp	.-248    	; 0x634 <main+0xe>

0000072c <__tablejump2__>:
 72c:	ee 0f       	add	r30, r30
 72e:	ff 1f       	adc	r31, r31
 730:	05 90       	lpm	r0, Z+
 732:	f4 91       	lpm	r31, Z
 734:	e0 2d       	mov	r30, r0
 736:	09 94       	ijmp

00000738 <_exit>:
 738:	f8 94       	cli

0000073a <__stop_program>:
 73a:	ff cf       	rjmp	.-2      	; 0x73a <__stop_program>
